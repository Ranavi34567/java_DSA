class Solution {
    public int rightBinarySearch(int[] nums,int target){
        int l=0;
        int r=nums.length-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]>target){
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        if(r>=0 && nums[r]==target){
            return  r;
        }
        return -1;
    }
    public int leftBinarySearch(int[] nums,int target){
        int l=0;
        int r=nums.length-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]>=target){
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        if(l<nums.length && nums[l]==target){
            return l;
        }
        return -1;
    }
    public int[] searchRange(int[] nums, int target) {
        int r=rightBinarySearch(nums,target);
        int l=leftBinarySearch(nums,target);
        int[] res={l,r};
        return res;
        
    }
}
